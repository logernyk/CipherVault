/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  PhotoAlbum,
  PhotoAlbumInterface,
} from "../../contracts/PhotoAlbum";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "ERC721IncorrectOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ERC721InsufficientApproval",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
    ],
    name: "ERC721InvalidApprover",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "ERC721InvalidOperator",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "ERC721InvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "ERC721InvalidReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ERC721InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ERC721NonexistentToken",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "approved",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getAlbum",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "string",
            name: "description",
            type: "string",
          },
          {
            internalType: "uint64",
            name: "createdAt",
            type: "uint64",
          },
          {
            internalType: "address",
            name: "owner",
            type: "address",
          },
          {
            internalType: "uint256[]",
            name: "photoIds",
            type: "uint256[]",
          },
          {
            internalType: "bool",
            name: "isPublic",
            type: "bool",
          },
        ],
        internalType: "struct PhotoAlbum.AlbumMeta",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getApproved",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getEncryptedUploadCount",
    outputs: [
      {
        internalType: "euint32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "photoId",
        type: "uint256",
      },
    ],
    name: "getPhoto",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "contentHash",
            type: "bytes32",
          },
          {
            internalType: "string",
            name: "metadataURI",
            type: "string",
          },
          {
            internalType: "address",
            name: "owner",
            type: "address",
          },
          {
            internalType: "uint64",
            name: "timestamp",
            type: "uint64",
          },
        ],
        internalType: "struct PhotoAlbum.PhotoMeta",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "description",
        type: "string",
      },
      {
        internalType: "uint256[]",
        name: "photoIds",
        type: "uint256[]",
      },
      {
        internalType: "bool",
        name: "isPublic",
        type: "bool",
      },
    ],
    name: "mintAlbum",
    outputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "protocolId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "isPublic",
        type: "bool",
      },
    ],
    name: "setAlbumPublic",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "tokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "contentHash",
        type: "bytes32",
      },
      {
        internalType: "string",
        name: "metadataURI",
        type: "string",
      },
      {
        internalType: "externalEuint32",
        name: "deltaEncrypted",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "inputProof",
        type: "bytes",
      },
    ],
    name: "uploadPhoto",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561000f575f5ffd5b506040518060400160405280600a81526020016950686f746f416c62756d60b01b815250604051806040016040528060048152602001632820a62160e11b81525061013d61006161015d60201b60201c565b80517f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e464970080546001600160a01b03199081166001600160a01b039384161790915560208301517f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497018054831691841691909117905560408301517f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497028054831691841691909117905560608301517f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497038054909216921691909117905550565b5f610148838261028d565b506001610155828261028d565b505050610347565b604080516080810182525f808252602082018190529181018290526060810191909152506040805160808101825273687820221192c5b662b25367f70076a37bc79b6c815273848b0066793bcc60346da1f49049357399b8d595602082015273a02cda4ca3a71d7c46997716f4283aa851c2881291810191909152731364cbbf2cdf5032c47d8226a6f6fbd2afcdacac606082015290565b634e487b7160e01b5f52604160045260245ffd5b600181811c9082168061021d57607f821691505b60208210810361023b57634e487b7160e01b5f52602260045260245ffd5b50919050565b601f82111561028857805f5260205f20601f840160051c810160208510156102665750805b601f840160051c820191505b81811015610285575f8155600101610272565b50505b505050565b81516001600160401b038111156102a6576102a66101f5565b6102ba816102b48454610209565b84610241565b6020601f8211600181146102ec575f83156102d55750848201515b5f19600385901b1c1916600184901b178455610285565b5f84815260208120601f198516915b8281101561031b57878501518255602094850194600190920191016102fb565b508482101561033857868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b61205a806103545f395ff3fe608060405234801561000f575f5ffd5b5060043610610163575f3560e01c806395d89b41116100c7578063c6b2c69b1161007d578063d6e465c911610063578063d6e465c914610300578063da1f12ab14610320578063e985e9c514610328575f5ffd5b8063c6b2c69b146102da578063c87b56dd146102ed575f5ffd5b8063a6ba8578116100ad578063a6ba85781461027f578063b6be128a146102a7578063b88d4fde146102c7575f5ffd5b806395d89b4114610264578063a22cb4651461026c575f5ffd5b806342842e0e1161011c5780635b461bc1116101025780635b461bc11461021d5780636352211e1461023e57806370a0823114610251575f5ffd5b806342842e0e146101f7578063506437131461020a575f5ffd5b8063081812fc1161014c578063081812fc146101a4578063095ea7b3146101cf57806323b872dd146101e4575f5ffd5b806301ffc9a71461016757806306fdde031461018f575b5f5ffd5b61017a610175366004611885565b610363565b60405190151581526020015b60405180910390f35b6101976103b4565b60405161018691906118ce565b6101b76101b23660046118e0565b610443565b6040516001600160a01b039091168152602001610186565b6101e26101dd366004611912565b61046a565b005b6101e26101f236600461193a565b610479565b6101e261020536600461193a565b610507565b6101e26102183660046119b9565b610526565b61023061022b366004611a4a565b6106a0565b604051908152602001610186565b6101b761024c3660046118e0565b61089d565b61023061025f366004611b2a565b6108a7565b6101976108ec565b6101e261027a366004611b43565b6108fb565b61023061028d366004611b2a565b6001600160a01b03165f9081526006602052604090205490565b6102ba6102b53660046118e0565b610906565b6040516101869190611b74565b6101e26102d5366004611be0565b610a28565b6101e26102e8366004611cbd565b610a40565b6101976102fb3660046118e0565b610ac2565b61031361030e3660046118e0565b610b33565b6040516101869190611cde565b612711610230565b61017a610336366004611da4565b6001600160a01b039182165f90815260056020908152604080832093909416825291909152205460ff1690565b5f6001600160e01b031982166380ac58cd60e01b148061039357506001600160e01b03198216635b5e139f60e01b145b806103ae57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60605f80546103c290611dcc565b80601f01602080910402602001604051908101604052809291908181526020018280546103ee90611dcc565b80156104395780601f1061041057610100808354040283529160200191610439565b820191905f5260205f20905b81548152906001019060200180831161041c57829003601f168201915b5050505050905090565b5f61044d82610d3e565b505f828152600460205260409020546001600160a01b03166103ae565b610475828233610d76565b5050565b6001600160a01b0382166104a757604051633250574960e11b81525f60048201526024015b60405180910390fd5b5f6104b3838333610d83565b9050836001600160a01b0316816001600160a01b031614610501576040516364283d7b60e01b81526001600160a01b038086166004830152602482018490528216604482015260640161049e565b50505050565b61052183838360405180602001604052805f815250610a28565b505050565b5f6105668484848080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250610e8292505050565b335f908152600660205260409020549091506105829082610e8f565b335f90815260066020526040902081905561059c90610ebd565b50335f818152600660205260409020546105b591610ecc565b505f60075f81546105c590611e04565b9190508190559050604051806080016040528089815260200188888080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92018290525093855250503360208085019190915267ffffffffffffffff4216604094850152858352600981529290912083518155918301516001830191506106529082611e6c565b5060408201516002909101805460609093015167ffffffffffffffff16600160a01b026001600160e01b03199093166001600160a01b03909216919091179190911790555050505050505050565b5f826106ee5760405162461bcd60e51b815260206004820152600560248201527f656d707479000000000000000000000000000000000000000000000000000000604482015260640161049e565b60085f81546106fc90611e04565b9182905550905061070d3382610ede565b6040518060c0016040528089898080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250505090825250604080516020601f8a01819004810282018101909252888152918101919089908990819084018382808284375f9201919091525050509082525067ffffffffffffffff4216602080830191909152336040808401919091528051878302818101840190925287815260609093019291889188918291908501908490808284375f920182905250938552505050841515602092830152838152600a90915260409020815181906107ff9082611e6c565b50602082015160018201906108149082611e6c565b50604082015160028201805460608501516001600160a01b031668010000000000000000026001600160e01b031990911667ffffffffffffffff9093169290921791909117905560808201518051610876916003840191602090910190611819565b5060a091909101516004909101805460ff1916911515919091179055979650505050505050565b5f6103ae82610d3e565b5f6001600160a01b0382166108d1576040516322718ad960e21b81525f600482015260240161049e565b506001600160a01b03165f9081526003602052604090205490565b6060600180546103c290611dcc565b610475338383610ef7565b61094160405180608001604052805f8152602001606081526020015f6001600160a01b031681526020015f67ffffffffffffffff1681525090565b60095f8381526020019081526020015f206040518060800160405290815f820154815260200160018201805461097690611dcc565b80601f01602080910402602001604051908101604052809291908181526020018280546109a290611dcc565b80156109ed5780601f106109c4576101008083540402835291602001916109ed565b820191905f5260205f20905b8154815290600101906020018083116109d057829003601f168201915b5050509183525050600291909101546001600160a01b0381166020830152600160a01b900467ffffffffffffffff1660409091015292915050565b610a33848484610479565b6105013385858585610f95565b33610a4a8361089d565b6001600160a01b031614610aa05760405162461bcd60e51b815260206004820152600960248201527f6e6f74206f776e65720000000000000000000000000000000000000000000000604482015260640161049e565b5f918252600a6020526040909120600401805460ff1916911515919091179055565b6060610acd82610d3e565b505f610ae360408051602081019091525f815290565b90505f815111610b015760405180602001604052805f815250610b2c565b80610b0b846110bd565b604051602001610b1c929190611f3e565b6040516020818303038152906040525b9392505050565b6040805160c0810182526060808252602082018190525f928201839052808201839052608082015260a08101919091525f828152600a602052604090819020815160c08101909252805482908290610b8a90611dcc565b80601f0160208091040260200160405190810160405280929190818152602001828054610bb690611dcc565b8015610c015780601f10610bd857610100808354040283529160200191610c01565b820191905f5260205f20905b815481529060010190602001808311610be457829003601f168201915b50505050508152602001600182018054610c1a90611dcc565b80601f0160208091040260200160405190810160405280929190818152602001828054610c4690611dcc565b8015610c915780601f10610c6857610100808354040283529160200191610c91565b820191905f5260205f20905b815481529060010190602001808311610c7457829003601f168201915b5050509183525050600282015467ffffffffffffffff8116602080840191909152680100000000000000009091046001600160a01b03166040808401919091526003840180548251818502810185019093528083526060909401939192909190830182828015610d1e57602002820191905f5260205f20905b815481526020019060010190808311610d0a575b50505091835250506004919091015460ff16151560209091015292915050565b5f818152600260205260408120546001600160a01b0316806103ae57604051637e27328960e01b81526004810184905260240161049e565b610521838383600161115a565b5f828152600260205260408120546001600160a01b0390811690831615610daf57610daf818486611289565b6001600160a01b03811615610de957610dca5f855f5f61115a565b6001600160a01b0381165f90815260036020526040902080545f190190555b6001600160a01b03851615610e17576001600160a01b0385165f908152600360205260409020805460010190555b5f84815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0389811691821790925591518793918516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4949350505050565b5f610b2c838360046112ed565b5f82610ea157610e9e5f61140d565b92505b81610eb257610eaf5f61140d565b91505b610b2c83835f61141f565b5f610ec882306114ff565b5090565b5f610ed783836114ff565b5090919050565b610475828260405180602001604052805f815250611588565b6001600160a01b038216610f2957604051630b61174360e31b81526001600160a01b038316600482015260240161049e565b6001600160a01b038381165f81815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0383163b156110b657604051630a85bd0160e11b81526001600160a01b0384169063150b7a0290610fd7908890889087908790600401611f52565b6020604051808303815f875af1925050508015611011575060408051601f3d908101601f1916820190925261100e91810190611f88565b60015b611078573d80801561103e576040519150601f19603f3d011682016040523d82523d5f602084013e611043565b606091505b5080515f0361107057604051633250574960e11b81526001600160a01b038516600482015260240161049e565b805160208201fd5b6001600160e01b03198116630a85bd0160e11b146110b457604051633250574960e11b81526001600160a01b038516600482015260240161049e565b505b5050505050565b60605f6110c98361159f565b60010190505f8167ffffffffffffffff8111156110e8576110e8611bcc565b6040519080825280601f01601f191660200182016040528015611112576020820181803683370190505b5090508181016020015b5f19017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461111c57509392505050565b808061116e57506001600160a01b03821615155b1561124d575f61117d84610d3e565b90506001600160a01b038316158015906111a95750826001600160a01b0316816001600160a01b031614155b80156111da57506001600160a01b038082165f9081526005602090815260408083209387168352929052205460ff16155b156112035760405163a9fbf51f60e01b81526001600160a01b038416600482015260240161049e565b811561124b5783856001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b50505f908152600460205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b611294838383611680565b610521576001600160a01b0383166112c257604051637e27328960e01b81526004810182905260240161049e565b60405163177e802f60e01b81526001600160a01b03831660048201526024810182905260440161049e565b7f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497015460405163196d0b9b60e01b81525f917f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e4649700916001600160a01b039091169063196d0b9b90611366908890339089908990600401611fc3565b6020604051808303815f875af1158015611382573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906113a69190611ff9565b8154604051630f8e573b60e21b8152600481018390523360248201529193506001600160a01b031690633e395cec906044015f604051808303815f87803b1580156113ef575f5ffd5b505af1158015611401573d5f5f3e3d5ffd5b50505050509392505050565b5f6103ae8263ffffffff166004611703565b5f5f82156114325750600160f81b611435565b505f5b5f7f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e4649700600181015460405163022f65e760e31b815260048101899052602481018890527fff00000000000000000000000000000000000000000000000000000000000000851660448201529192506001600160a01b03169063117b2f38906064016020604051808303815f875af11580156114d1573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906114f59190611ff9565b9695505050505050565b5f7f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497008054604051635ca4b5b160e11b8152600481018690526001600160a01b03858116602483015292935091169063b9496b62906044015f604051808303815f87803b15801561156d575f5ffd5b505af115801561157f573d5f5f3e3d5ffd5b50505050505050565b61159283836117b8565b610521335f858585610f95565b5f807a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106115e7577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310611613576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061163157662386f26fc10000830492506010015b6305f5e1008310611649576305f5e100830492506008015b612710831061165d57612710830492506004015b6064831061166f576064830492506002015b600a83106103ae5760010192915050565b5f6001600160a01b038316158015906116fb5750826001600160a01b0316846001600160a01b031614806116d857506001600160a01b038085165f9081526005602090815260408083209387168352929052205460ff165b806116fb57505f828152600460205260409020546001600160a01b038481169116145b949350505050565b7f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e464970154604051639cd07acb60e01b81525f917f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e4649700916001600160a01b0390911690639cd07acb906117789087908790600401612010565b6020604051808303815f875af1158015611794573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906116fb9190611ff9565b6001600160a01b0382166117e157604051633250574960e11b81525f600482015260240161049e565b5f6117ed83835f610d83565b90506001600160a01b03811615610521576040516339e3563760e11b81525f600482015260240161049e565b828054828255905f5260205f20908101928215611852579160200282015b82811115611852578251825591602001919060010190611837565b50610ec89291505b80821115610ec8575f815560010161185a565b6001600160e01b031981168114611882575f5ffd5b50565b5f60208284031215611895575f5ffd5b8135610b2c8161186d565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b602081525f610b2c60208301846118a0565b5f602082840312156118f0575f5ffd5b5035919050565b80356001600160a01b038116811461190d575f5ffd5b919050565b5f5f60408385031215611923575f5ffd5b61192c836118f7565b946020939093013593505050565b5f5f5f6060848603121561194c575f5ffd5b611955846118f7565b9250611963602085016118f7565b929592945050506040919091013590565b5f5f83601f840112611984575f5ffd5b50813567ffffffffffffffff81111561199b575f5ffd5b6020830191508360208285010111156119b2575f5ffd5b9250929050565b5f5f5f5f5f5f608087890312156119ce575f5ffd5b86359550602087013567ffffffffffffffff8111156119eb575f5ffd5b6119f789828a01611974565b90965094505060408701359250606087013567ffffffffffffffff811115611a1d575f5ffd5b611a2989828a01611974565b979a9699509497509295939492505050565b8035801515811461190d575f5ffd5b5f5f5f5f5f5f5f6080888a031215611a60575f5ffd5b873567ffffffffffffffff811115611a76575f5ffd5b611a828a828b01611974565b909850965050602088013567ffffffffffffffff811115611aa1575f5ffd5b611aad8a828b01611974565b909650945050604088013567ffffffffffffffff811115611acc575f5ffd5b8801601f81018a13611adc575f5ffd5b803567ffffffffffffffff811115611af2575f5ffd5b8a60208260051b8401011115611b06575f5ffd5b60209190910193509150611b1c60608901611a3b565b905092959891949750929550565b5f60208284031215611b3a575f5ffd5b610b2c826118f7565b5f5f60408385031215611b54575f5ffd5b611b5d836118f7565b9150611b6b60208401611a3b565b90509250929050565b60208152815160208201525f602083015160806040840152611b9960a08401826118a0565b90506001600160a01b03604085015116606084015267ffffffffffffffff60608501511660808401528091505092915050565b634e487b7160e01b5f52604160045260245ffd5b5f5f5f5f60808587031215611bf3575f5ffd5b611bfc856118f7565b9350611c0a602086016118f7565b925060408501359150606085013567ffffffffffffffff811115611c2c575f5ffd5b8501601f81018713611c3c575f5ffd5b803567ffffffffffffffff811115611c5657611c56611bcc565b604051601f8201601f19908116603f0116810167ffffffffffffffff81118282101715611c8557611c85611bcc565b604052818152828201602001891015611c9c575f5ffd5b816020840160208301375f6020838301015280935050505092959194509250565b5f5f60408385031215611cce575f5ffd5b82359150611b6b60208401611a3b565b602081525f825160c06020840152611cf960e08401826118a0565b90506020840151601f19848303016040850152611d1682826118a0565b91505067ffffffffffffffff60408501511660608401526001600160a01b0360608501511660808401526080840151601f198483030160a08501528181518084526020840191506020830193505f92505b80831015611d8a5783518252602082019150602084019350600183019250611d67565b5060a086015180151560c087015292505b95945050505050565b5f5f60408385031215611db5575f5ffd5b611dbe836118f7565b9150611b6b602084016118f7565b600181811c90821680611de057607f821691505b602082108103611dfe57634e487b7160e01b5f52602260045260245ffd5b50919050565b5f60018201611e2157634e487b7160e01b5f52601160045260245ffd5b5060010190565b601f82111561052157805f5260205f20601f840160051c81016020851015611e4d5750805b601f840160051c820191505b818110156110b6575f8155600101611e59565b815167ffffffffffffffff811115611e8657611e86611bcc565b611e9a81611e948454611dcc565b84611e28565b6020601f821160018114611ecc575f8315611eb55750848201515b5f19600385901b1c1916600184901b1784556110b6565b5f84815260208120601f198516915b82811015611efb5787850151825560209485019460019092019101611edb565b5084821015611f1857868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b5f81518060208401855e5f93019283525090919050565b5f6116fb611f4c8386611f27565b84611f27565b6001600160a01b03851681526001600160a01b0384166020820152826040820152608060608201525f6114f560808301846118a0565b5f60208284031215611f98575f5ffd5b8151610b2c8161186d565b60548110611fbf57634e487b7160e01b5f52602160045260245ffd5b9052565b8481526001600160a01b0384166020820152608060408201525f611fea60808301856118a0565b9050611d9b6060830184611fa3565b5f60208284031215612009575f5ffd5b5051919050565b82815260408101610b2c6020830184611fa356fea2646970667358221220cf246ef471592e958adc90295c4bf757dc55592836799249c3a67629f12b73a964736f6c634300081b0033";

type PhotoAlbumConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PhotoAlbumConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PhotoAlbum__factory extends ContractFactory {
  constructor(...args: PhotoAlbumConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      PhotoAlbum & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): PhotoAlbum__factory {
    return super.connect(runner) as PhotoAlbum__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PhotoAlbumInterface {
    return new Interface(_abi) as PhotoAlbumInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): PhotoAlbum {
    return new Contract(address, _abi, runner) as unknown as PhotoAlbum;
  }
}
